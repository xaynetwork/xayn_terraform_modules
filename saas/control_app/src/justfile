set fallback
set dotenv-load := true
set shell := ["bash", "-euxc", "-o", "pipefail"]

default:
    @{{just_executable()}} --list

py-lint:
  pylint ./app --rcfile .pylintrc

py-test:
  python3 -m pytest ./app/tests/unit

py-test-debug:
  python3 -m pytest --trace --pdbcls=IPython.terminal.debugger:TerminalPdb ./app/tests/unit

py-install:
  pip3 install -r ./app/requirements.txt

dynamodb-create-table:
  # TODO use JSON schema
   AWS_ACCESS_KEY_ID=X AWS_SECRET_ACCESS_KEY=X aws dynamodb create-table --endpoint-url http://localhost:8000 \
      --table-name saas \
      --attribute-definitions AttributeName=dataType,AttributeType=S AttributeName=dataId,AttributeType=S \
      --key-schema AttributeName=dataType,KeyType=HASH AttributeName=dataId,KeyType=RANGE \
      --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5 \
      --region ddblocal

dynamodb-get-iten type id:
  AWS_ACCESS_KEY_ID=X AWS_SECRET_ACCESS_KEY=X aws dynamodb get-item --endpoint-url http://localhost:8000 --table-name saas --key '{"dataType": {"S": "{{type}}"}, "dataId": {"S":"{{id}}"}}' --region ddblocal

sam-start-dynamodb:
  #!/bin/bash
  if ! docker network ls | grep lambda-local
  then
    docker network create lambda-local
  fi
  docker rm -f /dynamodb
  docker run -p 8000:8000 --network lambda-local --name dynamodb amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb -inMemory  

sam-local-invoke-authentication:
  sam local invoke Authentication -e app/events/auth_documents.json --docker-network lambda-local

sam-local-invoke-provisioning:
  sam local invoke Provisioning -e app/events/auth_documents.json --docker-network lambda-local

sam-local-api:
  sam local start-api --docker-network lambda-local
