set fallback
set dotenv-load := true
set shell := ["bash", "-euxc", "-o", "pipefail"]

default:
    @{{just_executable()}} --list


py-format:
  python3 -m black ./TenantManagement

py-format-check:
  python3 -m black ./TenantManagement --check

py-lint:
  python3 -m pylint ./TenantManagement --rcfile .pylintrc

py-test:
  python3 -m pytest ./TenantManagement/tests/unit

py-test-debug:
  python3 -m pytest --trace --pdbcls=IPython.terminal.debugger:TerminalPdb ./TenantManagement/tests/unit

py-install:
  python3 -m pip install -r ./TenantManagement/requirements.txt

ts-install:
  #!/bin/bash
  cd TenantPipeline
  npm install 

ts-lint:
  #!/bin/bash
  cd TenantPipeline
  npx eslint .

ts-format:
  #!/bin/bash
  cd TenantPipeline
  npx tsfmt -r

ts-format-check:
  #!/bin/bash
  cd TenantPipeline
  npx tsfmt --verify

ts-test:
  #!/bin/bash
  cd TenantPipeline
  npx jest

dynamodb-create-table:
  # TODO use JSON schema
  AWS_ACCESS_KEY_ID=X AWS_SECRET_ACCESS_KEY=X aws dynamodb create-table --endpoint-url http://localhost:8000 \
  --table-name saas_tenants \
  --attribute-definitions AttributeName=id,AttributeType=S \
  --key-schema AttributeName=id,KeyType=HASH \
  --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5 \
  --region ddblocal \
  --stream-specification StreamEnabled=true,StreamViewType=NEW_AND_OLD_IMAGES

dynamodb-get-item id:
  #!/bin/bash
  AWS_ACCESS_KEY_ID=X AWS_SECRET_ACCESS_KEY=X aws dynamodb get-item \ 
  --endpoint-url http://localhost:8000 \ 
  --table-name saas \ 
  --key '{"id": {"S": "{{id}}"}}' \ 
  --region ddblocal

sam-start-dynamodb:
  #!/bin/bash
  if ! docker network ls | grep lambda-local
  then
    docker network create lambda-local
  fi
  docker rm -f /dynamodb
  docker run -p 8000:8000 --network lambda-local --name dynamodb amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb -inMemory  

sam-local-invoke-authentication:
  sam build && sam local invoke Authentication -e TenantManagement/events/auth_documents.json  --docker-network lambda-local

sam-local-invoke-provisioning:
 sam build &&  sam local invoke Provisioning -e TenantManagement/events/signup.json --docker-network lambda-local

sam-local-invoke-tenant-pipeline:
  #!/bin/bash
  FILE=$(ls -tp  "$HOME/.aws/sso/cache/" | grep -v /$ | grep -v boto |  head -1)
  FILE_PATH="$HOME/.aws/sso/cache/$FILE"
  access_token=$(jq -r .accessToken < $FILE_PATH)
  temp_keys=$(aws sso get-role-credentials --role-name AdministratorAccess --account-id 917039226361  --access-token $access_token)
  access_key_id=$(echo $TEM | jq -r .roleCredentials.accessKeyId)
  access_key_secret=$(echo $TEM | jq -r .roleCredentials.secretAccessKey)
  ENV_FILE=$(mktemp)
  jq -n --arg id "$access_key_id" --arg secret "$access_key_secret" '{ "AWS_ACCESS_KEY_ID": $id,  "AWS_SECRET_ACCESS_KEY": $secret }'  > "$ENV_FILE"

  sam build
  sam local invoke TenantPipeline \
  -e TenantPipeline/events/put_item.json \
  --docker-network lambda-local \
  --container-env-vars $ENV_FILE
  rm $ENV_FILE


sam-local-api:
  sam local start-api --docker-network lambda-local
